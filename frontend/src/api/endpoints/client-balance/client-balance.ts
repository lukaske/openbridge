/**
 * Generated by orval v6.27.1 🍺
 * Do not edit manually.
 * OpenBridge.me API
 * This is the OpenBridge.me client API. It is used to interact with the OpenBridge.me platform. For specific APIs we recommend using their respective documentation.
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from "@tanstack/react-query";
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import { customInstance } from "../../../services/custom-axios-instance";
import type { ErrorType } from "../../../services/custom-axios-instance";

export const clientBalanceRetrieve = (signal?: AbortSignal) => {
  return customInstance<void>({
    url: `/api/client-balance/`,
    method: "GET",
    signal,
  });
};

export const getClientBalanceRetrieveQueryKey = () => {
  return [`/api/client-balance/`] as const;
};

export const getClientBalanceRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof clientBalanceRetrieve>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof clientBalanceRetrieve>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getClientBalanceRetrieveQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof clientBalanceRetrieve>>
  > = ({ signal }) => clientBalanceRetrieve(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof clientBalanceRetrieve>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ClientBalanceRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof clientBalanceRetrieve>>
>;
export type ClientBalanceRetrieveQueryError = ErrorType<unknown>;

export const useClientBalanceRetrieve = <
  TData = Awaited<ReturnType<typeof clientBalanceRetrieve>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof clientBalanceRetrieve>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getClientBalanceRetrieveQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

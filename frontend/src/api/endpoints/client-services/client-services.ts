/**
 * Generated by orval v6.27.1 üç∫
 * Do not edit manually.
 * OpenBridge.me API
 * This is the OpenBridge.me client API. It is used to interact with the OpenBridge.me platform. For specific APIs we recommend using their respective documentation.
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  APIService,
  ClientServicesListParams,
  PaginatedAPIServiceList,
  PatchedAPIService,
} from "../../model";
import { customInstance } from "../../../services/custom-axios-instance";
import type {
  ErrorType,
  BodyType,
} from "../../../services/custom-axios-instance";

type IsAny<T> = 0 extends 1 & T ? true : false;
type IsUnknown<T> = IsAny<T> extends true
  ? false
  : unknown extends T
  ? true
  : false;
type Primitive = string | number | boolean | bigint | symbol | undefined | null;
type isBuiltin = Primitive | Function | Date | Error | RegExp;
type NonReadonly<T> = T extends Exclude<isBuiltin, Error>
  ? T
  : T extends Map<infer Key, infer Value>
  ? Map<NonReadonly<Key>, NonReadonly<Value>>
  : T extends ReadonlyMap<infer Key, infer Value>
  ? Map<NonReadonly<Key>, NonReadonly<Value>>
  : T extends WeakMap<infer Key, infer Value>
  ? WeakMap<NonReadonly<Key>, NonReadonly<Value>>
  : T extends Set<infer Values>
  ? Set<NonReadonly<Values>>
  : T extends ReadonlySet<infer Values>
  ? Set<NonReadonly<Values>>
  : T extends WeakSet<infer Values>
  ? WeakSet<NonReadonly<Values>>
  : T extends Promise<infer Value>
  ? Promise<NonReadonly<Value>>
  : T extends {}
  ? { -readonly [Key in keyof T]: NonReadonly<T[Key]> }
  : IsUnknown<T> extends true
  ? unknown
  : T;

export const clientServicesList = (
  params?: ClientServicesListParams,
  signal?: AbortSignal
) => {
  return customInstance<PaginatedAPIServiceList>({
    url: `/api/client-services/`,
    method: "GET",
    params,
    signal,
  });
};

export const getClientServicesListQueryKey = (
  params?: ClientServicesListParams
) => {
  return [`/api/client-services/`, ...(params ? [params] : [])] as const;
};

export const getClientServicesListQueryOptions = <
  TData = Awaited<ReturnType<typeof clientServicesList>>,
  TError = ErrorType<unknown>
>(
  params?: ClientServicesListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof clientServicesList>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getClientServicesListQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof clientServicesList>>
  > = ({ signal }) => clientServicesList(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof clientServicesList>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ClientServicesListQueryResult = NonNullable<
  Awaited<ReturnType<typeof clientServicesList>>
>;
export type ClientServicesListQueryError = ErrorType<unknown>;

export const useClientServicesList = <
  TData = Awaited<ReturnType<typeof clientServicesList>>,
  TError = ErrorType<unknown>
>(
  params?: ClientServicesListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof clientServicesList>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getClientServicesListQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const clientServicesCreate = (
  aPIService: BodyType<NonReadonly<APIService>>
) => {
  return customInstance<APIService>({
    url: `/api/client-services/`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: aPIService,
  });
};

export const getClientServicesCreateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof clientServicesCreate>>,
    TError,
    { data: BodyType<NonReadonly<APIService>> },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof clientServicesCreate>>,
  TError,
  { data: BodyType<NonReadonly<APIService>> },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof clientServicesCreate>>,
    { data: BodyType<NonReadonly<APIService>> }
  > = (props) => {
    const { data } = props ?? {};

    return clientServicesCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type ClientServicesCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof clientServicesCreate>>
>;
export type ClientServicesCreateMutationBody = BodyType<
  NonReadonly<APIService>
>;
export type ClientServicesCreateMutationError = ErrorType<unknown>;

export const useClientServicesCreate = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof clientServicesCreate>>,
    TError,
    { data: BodyType<NonReadonly<APIService>> },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof clientServicesCreate>>,
  TError,
  { data: BodyType<NonReadonly<APIService>> },
  TContext
> => {
  const mutationOptions = getClientServicesCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const clientServicesRetrieve = (id: number, signal?: AbortSignal) => {
  return customInstance<APIService>({
    url: `/api/client-services/${id}/`,
    method: "GET",
    signal,
  });
};

export const getClientServicesRetrieveQueryKey = (id: number) => {
  return [`/api/client-services/${id}/`] as const;
};

export const getClientServicesRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof clientServicesRetrieve>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof clientServicesRetrieve>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getClientServicesRetrieveQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof clientServicesRetrieve>>
  > = ({ signal }) => clientServicesRetrieve(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof clientServicesRetrieve>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ClientServicesRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof clientServicesRetrieve>>
>;
export type ClientServicesRetrieveQueryError = ErrorType<unknown>;

export const useClientServicesRetrieve = <
  TData = Awaited<ReturnType<typeof clientServicesRetrieve>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof clientServicesRetrieve>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getClientServicesRetrieveQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const clientServicesUpdate = (
  id: number,
  aPIService: BodyType<NonReadonly<APIService>>
) => {
  return customInstance<APIService>({
    url: `/api/client-services/${id}/`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: aPIService,
  });
};

export const getClientServicesUpdateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof clientServicesUpdate>>,
    TError,
    { id: number; data: BodyType<NonReadonly<APIService>> },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof clientServicesUpdate>>,
  TError,
  { id: number; data: BodyType<NonReadonly<APIService>> },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof clientServicesUpdate>>,
    { id: number; data: BodyType<NonReadonly<APIService>> }
  > = (props) => {
    const { id, data } = props ?? {};

    return clientServicesUpdate(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type ClientServicesUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof clientServicesUpdate>>
>;
export type ClientServicesUpdateMutationBody = BodyType<
  NonReadonly<APIService>
>;
export type ClientServicesUpdateMutationError = ErrorType<unknown>;

export const useClientServicesUpdate = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof clientServicesUpdate>>,
    TError,
    { id: number; data: BodyType<NonReadonly<APIService>> },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof clientServicesUpdate>>,
  TError,
  { id: number; data: BodyType<NonReadonly<APIService>> },
  TContext
> => {
  const mutationOptions = getClientServicesUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const clientServicesPartialUpdate = (
  id: number,
  patchedAPIService: BodyType<NonReadonly<PatchedAPIService>>
) => {
  return customInstance<APIService>({
    url: `/api/client-services/${id}/`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: patchedAPIService,
  });
};

export const getClientServicesPartialUpdateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof clientServicesPartialUpdate>>,
    TError,
    { id: number; data: BodyType<NonReadonly<PatchedAPIService>> },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof clientServicesPartialUpdate>>,
  TError,
  { id: number; data: BodyType<NonReadonly<PatchedAPIService>> },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof clientServicesPartialUpdate>>,
    { id: number; data: BodyType<NonReadonly<PatchedAPIService>> }
  > = (props) => {
    const { id, data } = props ?? {};

    return clientServicesPartialUpdate(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type ClientServicesPartialUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof clientServicesPartialUpdate>>
>;
export type ClientServicesPartialUpdateMutationBody = BodyType<
  NonReadonly<PatchedAPIService>
>;
export type ClientServicesPartialUpdateMutationError = ErrorType<unknown>;

export const useClientServicesPartialUpdate = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof clientServicesPartialUpdate>>,
    TError,
    { id: number; data: BodyType<NonReadonly<PatchedAPIService>> },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof clientServicesPartialUpdate>>,
  TError,
  { id: number; data: BodyType<NonReadonly<PatchedAPIService>> },
  TContext
> => {
  const mutationOptions =
    getClientServicesPartialUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const clientServicesDestroy = (id: number) => {
  return customInstance<void>({
    url: `/api/client-services/${id}/`,
    method: "DELETE",
  });
};

export const getClientServicesDestroyMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof clientServicesDestroy>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof clientServicesDestroy>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof clientServicesDestroy>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return clientServicesDestroy(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type ClientServicesDestroyMutationResult = NonNullable<
  Awaited<ReturnType<typeof clientServicesDestroy>>
>;

export type ClientServicesDestroyMutationError = ErrorType<unknown>;

export const useClientServicesDestroy = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof clientServicesDestroy>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof clientServicesDestroy>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getClientServicesDestroyMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Generated by orval v6.27.1 üç∫
 * Do not edit manually.
 * OpenBridge.me API
 * This is the OpenBridge.me client API. It is used to interact with the OpenBridge.me platform. For specific APIs we recommend using their respective documentation.
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  APIService,
  ApiServiceListParams,
  PaginatedAPIServiceList,
  PatchedAPIService,
} from "../../model";
import { customInstance } from "../../../services/custom-axios-instance";
import type {
  ErrorType,
  BodyType,
} from "../../../services/custom-axios-instance";

type IsAny<T> = 0 extends 1 & T ? true : false;
type IsUnknown<T> = IsAny<T> extends true
  ? false
  : unknown extends T
  ? true
  : false;
type Primitive = string | number | boolean | bigint | symbol | undefined | null;
type isBuiltin = Primitive | Function | Date | Error | RegExp;
type NonReadonly<T> = T extends Exclude<isBuiltin, Error>
  ? T
  : T extends Map<infer Key, infer Value>
  ? Map<NonReadonly<Key>, NonReadonly<Value>>
  : T extends ReadonlyMap<infer Key, infer Value>
  ? Map<NonReadonly<Key>, NonReadonly<Value>>
  : T extends WeakMap<infer Key, infer Value>
  ? WeakMap<NonReadonly<Key>, NonReadonly<Value>>
  : T extends Set<infer Values>
  ? Set<NonReadonly<Values>>
  : T extends ReadonlySet<infer Values>
  ? Set<NonReadonly<Values>>
  : T extends WeakSet<infer Values>
  ? WeakSet<NonReadonly<Values>>
  : T extends Promise<infer Value>
  ? Promise<NonReadonly<Value>>
  : T extends {}
  ? { -readonly [Key in keyof T]: NonReadonly<T[Key]> }
  : IsUnknown<T> extends true
  ? unknown
  : T;

export const apiServiceList = (
  params?: ApiServiceListParams,
  signal?: AbortSignal
) => {
  return customInstance<PaginatedAPIServiceList>({
    url: `/api/api-service/`,
    method: "GET",
    params,
    signal,
  });
};

export const getApiServiceListQueryKey = (params?: ApiServiceListParams) => {
  return [`/api/api-service/`, ...(params ? [params] : [])] as const;
};

export const getApiServiceListQueryOptions = <
  TData = Awaited<ReturnType<typeof apiServiceList>>,
  TError = ErrorType<unknown>
>(
  params?: ApiServiceListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof apiServiceList>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getApiServiceListQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiServiceList>>> = ({
    signal,
  }) => apiServiceList(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof apiServiceList>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ApiServiceListQueryResult = NonNullable<
  Awaited<ReturnType<typeof apiServiceList>>
>;
export type ApiServiceListQueryError = ErrorType<unknown>;

export const useApiServiceList = <
  TData = Awaited<ReturnType<typeof apiServiceList>>,
  TError = ErrorType<unknown>
>(
  params?: ApiServiceListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof apiServiceList>>, TError, TData>
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getApiServiceListQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const apiServiceCreate = (
  aPIService: BodyType<NonReadonly<APIService>>
) => {
  return customInstance<APIService>({
    url: `/api/api-service/`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: aPIService,
  });
};

export const getApiServiceCreateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof apiServiceCreate>>,
    TError,
    { data: BodyType<NonReadonly<APIService>> },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof apiServiceCreate>>,
  TError,
  { data: BodyType<NonReadonly<APIService>> },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof apiServiceCreate>>,
    { data: BodyType<NonReadonly<APIService>> }
  > = (props) => {
    const { data } = props ?? {};

    return apiServiceCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type ApiServiceCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof apiServiceCreate>>
>;
export type ApiServiceCreateMutationBody = BodyType<NonReadonly<APIService>>;
export type ApiServiceCreateMutationError = ErrorType<unknown>;

export const useApiServiceCreate = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof apiServiceCreate>>,
    TError,
    { data: BodyType<NonReadonly<APIService>> },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof apiServiceCreate>>,
  TError,
  { data: BodyType<NonReadonly<APIService>> },
  TContext
> => {
  const mutationOptions = getApiServiceCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const apiServiceRetrieve = (id: number, signal?: AbortSignal) => {
  return customInstance<APIService>({
    url: `/api/api-service/${id}/`,
    method: "GET",
    signal,
  });
};

export const getApiServiceRetrieveQueryKey = (id: number) => {
  return [`/api/api-service/${id}/`] as const;
};

export const getApiServiceRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof apiServiceRetrieve>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof apiServiceRetrieve>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getApiServiceRetrieveQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof apiServiceRetrieve>>
  > = ({ signal }) => apiServiceRetrieve(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof apiServiceRetrieve>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ApiServiceRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof apiServiceRetrieve>>
>;
export type ApiServiceRetrieveQueryError = ErrorType<unknown>;

export const useApiServiceRetrieve = <
  TData = Awaited<ReturnType<typeof apiServiceRetrieve>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof apiServiceRetrieve>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getApiServiceRetrieveQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const apiServiceUpdate = (
  id: number,
  aPIService: BodyType<NonReadonly<APIService>>
) => {
  return customInstance<APIService>({
    url: `/api/api-service/${id}/`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: aPIService,
  });
};

export const getApiServiceUpdateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof apiServiceUpdate>>,
    TError,
    { id: number; data: BodyType<NonReadonly<APIService>> },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof apiServiceUpdate>>,
  TError,
  { id: number; data: BodyType<NonReadonly<APIService>> },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof apiServiceUpdate>>,
    { id: number; data: BodyType<NonReadonly<APIService>> }
  > = (props) => {
    const { id, data } = props ?? {};

    return apiServiceUpdate(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type ApiServiceUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof apiServiceUpdate>>
>;
export type ApiServiceUpdateMutationBody = BodyType<NonReadonly<APIService>>;
export type ApiServiceUpdateMutationError = ErrorType<unknown>;

export const useApiServiceUpdate = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof apiServiceUpdate>>,
    TError,
    { id: number; data: BodyType<NonReadonly<APIService>> },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof apiServiceUpdate>>,
  TError,
  { id: number; data: BodyType<NonReadonly<APIService>> },
  TContext
> => {
  const mutationOptions = getApiServiceUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const apiServicePartialUpdate = (
  id: number,
  patchedAPIService: BodyType<NonReadonly<PatchedAPIService>>
) => {
  return customInstance<APIService>({
    url: `/api/api-service/${id}/`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: patchedAPIService,
  });
};

export const getApiServicePartialUpdateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof apiServicePartialUpdate>>,
    TError,
    { id: number; data: BodyType<NonReadonly<PatchedAPIService>> },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof apiServicePartialUpdate>>,
  TError,
  { id: number; data: BodyType<NonReadonly<PatchedAPIService>> },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof apiServicePartialUpdate>>,
    { id: number; data: BodyType<NonReadonly<PatchedAPIService>> }
  > = (props) => {
    const { id, data } = props ?? {};

    return apiServicePartialUpdate(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type ApiServicePartialUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof apiServicePartialUpdate>>
>;
export type ApiServicePartialUpdateMutationBody = BodyType<
  NonReadonly<PatchedAPIService>
>;
export type ApiServicePartialUpdateMutationError = ErrorType<unknown>;

export const useApiServicePartialUpdate = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof apiServicePartialUpdate>>,
    TError,
    { id: number; data: BodyType<NonReadonly<PatchedAPIService>> },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof apiServicePartialUpdate>>,
  TError,
  { id: number; data: BodyType<NonReadonly<PatchedAPIService>> },
  TContext
> => {
  const mutationOptions = getApiServicePartialUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const apiServiceDestroy = (id: number) => {
  return customInstance<void>({
    url: `/api/api-service/${id}/`,
    method: "DELETE",
  });
};

export const getApiServiceDestroyMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof apiServiceDestroy>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof apiServiceDestroy>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof apiServiceDestroy>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return apiServiceDestroy(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type ApiServiceDestroyMutationResult = NonNullable<
  Awaited<ReturnType<typeof apiServiceDestroy>>
>;

export type ApiServiceDestroyMutationError = ErrorType<unknown>;

export const useApiServiceDestroy = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof apiServiceDestroy>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof apiServiceDestroy>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getApiServiceDestroyMutationOptions(options);

  return useMutation(mutationOptions);
};

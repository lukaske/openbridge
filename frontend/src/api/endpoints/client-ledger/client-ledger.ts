/**
 * Generated by orval v6.27.1 üç∫
 * Do not edit manually.
 * OpenBridge.me API
 * This is the OpenBridge.me client API. It is used to interact with the OpenBridge.me platform. For specific APIs we recommend using their respective documentation.
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  ClientLedgerListParams,
  PaginatedUserLedgerList,
  PatchedUserLedger,
  UserLedger,
} from "../../model";
import { customInstance } from "../../../services/custom-axios-instance";
import type {
  ErrorType,
  BodyType,
} from "../../../services/custom-axios-instance";

type IsAny<T> = 0 extends 1 & T ? true : false;
type IsUnknown<T> = IsAny<T> extends true
  ? false
  : unknown extends T
  ? true
  : false;
type Primitive = string | number | boolean | bigint | symbol | undefined | null;
type isBuiltin = Primitive | Function | Date | Error | RegExp;
type NonReadonly<T> = T extends Exclude<isBuiltin, Error>
  ? T
  : T extends Map<infer Key, infer Value>
  ? Map<NonReadonly<Key>, NonReadonly<Value>>
  : T extends ReadonlyMap<infer Key, infer Value>
  ? Map<NonReadonly<Key>, NonReadonly<Value>>
  : T extends WeakMap<infer Key, infer Value>
  ? WeakMap<NonReadonly<Key>, NonReadonly<Value>>
  : T extends Set<infer Values>
  ? Set<NonReadonly<Values>>
  : T extends ReadonlySet<infer Values>
  ? Set<NonReadonly<Values>>
  : T extends WeakSet<infer Values>
  ? WeakSet<NonReadonly<Values>>
  : T extends Promise<infer Value>
  ? Promise<NonReadonly<Value>>
  : T extends {}
  ? { -readonly [Key in keyof T]: NonReadonly<T[Key]> }
  : IsUnknown<T> extends true
  ? unknown
  : T;

export const clientLedgerList = (
  params?: ClientLedgerListParams,
  signal?: AbortSignal
) => {
  return customInstance<PaginatedUserLedgerList>({
    url: `/api/client-ledger/`,
    method: "GET",
    params,
    signal,
  });
};

export const getClientLedgerListQueryKey = (
  params?: ClientLedgerListParams
) => {
  return [`/api/client-ledger/`, ...(params ? [params] : [])] as const;
};

export const getClientLedgerListQueryOptions = <
  TData = Awaited<ReturnType<typeof clientLedgerList>>,
  TError = ErrorType<unknown>
>(
  params?: ClientLedgerListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof clientLedgerList>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getClientLedgerListQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof clientLedgerList>>
  > = ({ signal }) => clientLedgerList(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof clientLedgerList>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ClientLedgerListQueryResult = NonNullable<
  Awaited<ReturnType<typeof clientLedgerList>>
>;
export type ClientLedgerListQueryError = ErrorType<unknown>;

export const useClientLedgerList = <
  TData = Awaited<ReturnType<typeof clientLedgerList>>,
  TError = ErrorType<unknown>
>(
  params?: ClientLedgerListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof clientLedgerList>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getClientLedgerListQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const clientLedgerCreate = (
  userLedger: BodyType<NonReadonly<UserLedger>>
) => {
  return customInstance<UserLedger>({
    url: `/api/client-ledger/`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: userLedger,
  });
};

export const getClientLedgerCreateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof clientLedgerCreate>>,
    TError,
    { data: BodyType<NonReadonly<UserLedger>> },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof clientLedgerCreate>>,
  TError,
  { data: BodyType<NonReadonly<UserLedger>> },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof clientLedgerCreate>>,
    { data: BodyType<NonReadonly<UserLedger>> }
  > = (props) => {
    const { data } = props ?? {};

    return clientLedgerCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type ClientLedgerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof clientLedgerCreate>>
>;
export type ClientLedgerCreateMutationBody = BodyType<NonReadonly<UserLedger>>;
export type ClientLedgerCreateMutationError = ErrorType<unknown>;

export const useClientLedgerCreate = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof clientLedgerCreate>>,
    TError,
    { data: BodyType<NonReadonly<UserLedger>> },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof clientLedgerCreate>>,
  TError,
  { data: BodyType<NonReadonly<UserLedger>> },
  TContext
> => {
  const mutationOptions = getClientLedgerCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const clientLedgerRetrieve = (id: number, signal?: AbortSignal) => {
  return customInstance<UserLedger>({
    url: `/api/client-ledger/${id}/`,
    method: "GET",
    signal,
  });
};

export const getClientLedgerRetrieveQueryKey = (id: number) => {
  return [`/api/client-ledger/${id}/`] as const;
};

export const getClientLedgerRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof clientLedgerRetrieve>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof clientLedgerRetrieve>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getClientLedgerRetrieveQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof clientLedgerRetrieve>>
  > = ({ signal }) => clientLedgerRetrieve(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof clientLedgerRetrieve>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ClientLedgerRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof clientLedgerRetrieve>>
>;
export type ClientLedgerRetrieveQueryError = ErrorType<unknown>;

export const useClientLedgerRetrieve = <
  TData = Awaited<ReturnType<typeof clientLedgerRetrieve>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof clientLedgerRetrieve>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getClientLedgerRetrieveQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const clientLedgerUpdate = (
  id: number,
  userLedger: BodyType<NonReadonly<UserLedger>>
) => {
  return customInstance<UserLedger>({
    url: `/api/client-ledger/${id}/`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: userLedger,
  });
};

export const getClientLedgerUpdateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof clientLedgerUpdate>>,
    TError,
    { id: number; data: BodyType<NonReadonly<UserLedger>> },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof clientLedgerUpdate>>,
  TError,
  { id: number; data: BodyType<NonReadonly<UserLedger>> },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof clientLedgerUpdate>>,
    { id: number; data: BodyType<NonReadonly<UserLedger>> }
  > = (props) => {
    const { id, data } = props ?? {};

    return clientLedgerUpdate(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type ClientLedgerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof clientLedgerUpdate>>
>;
export type ClientLedgerUpdateMutationBody = BodyType<NonReadonly<UserLedger>>;
export type ClientLedgerUpdateMutationError = ErrorType<unknown>;

export const useClientLedgerUpdate = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof clientLedgerUpdate>>,
    TError,
    { id: number; data: BodyType<NonReadonly<UserLedger>> },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof clientLedgerUpdate>>,
  TError,
  { id: number; data: BodyType<NonReadonly<UserLedger>> },
  TContext
> => {
  const mutationOptions = getClientLedgerUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const clientLedgerPartialUpdate = (
  id: number,
  patchedUserLedger: BodyType<NonReadonly<PatchedUserLedger>>
) => {
  return customInstance<UserLedger>({
    url: `/api/client-ledger/${id}/`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: patchedUserLedger,
  });
};

export const getClientLedgerPartialUpdateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof clientLedgerPartialUpdate>>,
    TError,
    { id: number; data: BodyType<NonReadonly<PatchedUserLedger>> },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof clientLedgerPartialUpdate>>,
  TError,
  { id: number; data: BodyType<NonReadonly<PatchedUserLedger>> },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof clientLedgerPartialUpdate>>,
    { id: number; data: BodyType<NonReadonly<PatchedUserLedger>> }
  > = (props) => {
    const { id, data } = props ?? {};

    return clientLedgerPartialUpdate(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type ClientLedgerPartialUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof clientLedgerPartialUpdate>>
>;
export type ClientLedgerPartialUpdateMutationBody = BodyType<
  NonReadonly<PatchedUserLedger>
>;
export type ClientLedgerPartialUpdateMutationError = ErrorType<unknown>;

export const useClientLedgerPartialUpdate = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof clientLedgerPartialUpdate>>,
    TError,
    { id: number; data: BodyType<NonReadonly<PatchedUserLedger>> },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof clientLedgerPartialUpdate>>,
  TError,
  { id: number; data: BodyType<NonReadonly<PatchedUserLedger>> },
  TContext
> => {
  const mutationOptions = getClientLedgerPartialUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const clientLedgerDestroy = (id: number) => {
  return customInstance<void>({
    url: `/api/client-ledger/${id}/`,
    method: "DELETE",
  });
};

export const getClientLedgerDestroyMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof clientLedgerDestroy>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof clientLedgerDestroy>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof clientLedgerDestroy>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return clientLedgerDestroy(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type ClientLedgerDestroyMutationResult = NonNullable<
  Awaited<ReturnType<typeof clientLedgerDestroy>>
>;

export type ClientLedgerDestroyMutationError = ErrorType<unknown>;

export const useClientLedgerDestroy = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof clientLedgerDestroy>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof clientLedgerDestroy>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getClientLedgerDestroyMutationOptions(options);

  return useMutation(mutationOptions);
};

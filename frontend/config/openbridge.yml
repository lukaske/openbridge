openapi: 3.0.3
info:
  title: OpenBridge.me API
  version: 1.0.0
  description: This is the OpenBridge.me client API. It is used to interact with the
    OpenBridge.me platform. For specific APIs we recommend using their respective
    documentation.
paths:
  /api/api-service/:
    get:
      operationId: api_service_list
      parameters:
      - in: query
        name: active
        schema:
          type: boolean
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: name
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - in: query
        name: owner
        schema:
          type: integer
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api-service
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAPIServiceList'
          description: ''
    post:
      operationId: api_service_create
      tags:
      - api-service
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/APIService'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/APIService'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/APIService'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIService'
          description: ''
  /api/api-service/{id}/:
    get:
      operationId: api_service_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this api service.
        required: true
      tags:
      - api-service
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIService'
          description: ''
    put:
      operationId: api_service_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this api service.
        required: true
      tags:
      - api-service
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/APIService'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/APIService'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/APIService'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIService'
          description: ''
    patch:
      operationId: api_service_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this api service.
        required: true
      tags:
      - api-service
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAPIService'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedAPIService'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedAPIService'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIService'
          description: ''
    delete:
      operationId: api_service_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this api service.
        required: true
      tags:
      - api-service
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '204':
          description: No response body
  /api/auth/login/:
    post:
      operationId: auth_login_create
      description: |-
        Check the credentials and return the REST Token
        if the credentials are valid and authenticated.
        Calls Django Auth login method to register User ID
        in Django session framework

        Accept the following POST parameters: username, password
        Return the REST Framework Token Object's key.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Login'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWT'
          description: ''
  /api/auth/logout/:
    post:
      operationId: auth_logout_create
      description: |-
        Calls Django logout method and delete the Token object
        assigned to the current User object.

        Accepts/Returns nothing.
      tags:
      - auth
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/auth/password/change/:
    post:
      operationId: auth_password_change_create
      description: |-
        Calls Django Auth SetPasswordForm save method.

        Accepts the following POST parameters: new_password1, new_password2
        Returns the success/fail message.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordChange'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/auth/password/reset/:
    post:
      operationId: auth_password_reset_create
      description: |-
        Calls Django Auth PasswordResetForm save method.

        Accepts the following POST parameters: email
        Returns the success/fail message.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordReset'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/auth/password/reset/confirm/:
    post:
      operationId: auth_password_reset_confirm_create
      description: |-
        Password reset e-mail link is confirmed, therefore
        this resets the user's password.

        Accepts the following POST parameters: token, uid,
            new_password1, new_password2
        Returns the success/fail message.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/auth/registration/:
    post:
      operationId: auth_registration_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Register'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Register'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWT'
          description: ''
  /api/auth/registration/resend-email/:
    post:
      operationId: auth_registration_resend_email_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResendEmailVerification'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResendEmailVerification'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResendEmailVerification'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/auth/registration/verify-email/:
    post:
      operationId: auth_registration_verify_email_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/auth/token/refresh/:
    post:
      operationId: auth_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/auth/token/verify/:
    post:
      operationId: auth_token_verify_create
      description: |-
        Takes a token and indicates if it is valid.  This view provides no
        information about a token's fitness for a particular use.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerify'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenVerify'
          description: ''
  /api/auth/user/:
    get:
      operationId: auth_user_retrieve
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - auth
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
    put:
      operationId: auth_user_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDetails'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserDetails'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserDetails'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
    patch:
      operationId: auth_user_partial_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserDetails'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserDetails'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserDetails'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
  /api/billing-rule/:
    get:
      operationId: billing_rule_list
      parameters:
      - in: query
        name: api_service
        schema:
          type: integer
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - billing-rule
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBillingRuleList'
          description: ''
    post:
      operationId: billing_rule_create
      tags:
      - billing-rule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BillingRule'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BillingRule'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BillingRule'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillingRule'
          description: ''
  /api/billing-rule/{id}/:
    get:
      operationId: billing_rule_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this billing rule.
        required: true
      tags:
      - billing-rule
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillingRule'
          description: ''
    put:
      operationId: billing_rule_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this billing rule.
        required: true
      tags:
      - billing-rule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BillingRule'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BillingRule'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BillingRule'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillingRule'
          description: ''
    patch:
      operationId: billing_rule_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this billing rule.
        required: true
      tags:
      - billing-rule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBillingRule'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBillingRule'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBillingRule'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillingRule'
          description: ''
    delete:
      operationId: billing_rule_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this billing rule.
        required: true
      tags:
      - billing-rule
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '204':
          description: No response body
  /api/client-api-keys/:
    get:
      operationId: client_api_keys_list
      parameters:
      - in: query
        name: api_service
        schema:
          type: integer
      - in: query
        name: id
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - in: query
        name: owner
        schema:
          type: integer
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - client-api-keys
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedServiceAPIKeyList'
          description: ''
    post:
      operationId: client_api_keys_create
      tags:
      - client-api-keys
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceAPIKey'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ServiceAPIKey'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ServiceAPIKey'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceAPIKey'
          description: ''
  /api/client-api-keys/{prefix}/:
    get:
      operationId: client_api_keys_retrieve
      parameters:
      - in: path
        name: prefix
        schema:
          type: string
        required: true
      tags:
      - client-api-keys
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceAPIKey'
          description: ''
    put:
      operationId: client_api_keys_update
      parameters:
      - in: path
        name: prefix
        schema:
          type: string
        required: true
      tags:
      - client-api-keys
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceAPIKey'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ServiceAPIKey'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ServiceAPIKey'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceAPIKey'
          description: ''
    patch:
      operationId: client_api_keys_partial_update
      parameters:
      - in: path
        name: prefix
        schema:
          type: string
        required: true
      tags:
      - client-api-keys
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedServiceAPIKey'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedServiceAPIKey'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedServiceAPIKey'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceAPIKey'
          description: ''
    delete:
      operationId: client_api_keys_destroy
      parameters:
      - in: path
        name: prefix
        schema:
          type: string
        required: true
      tags:
      - client-api-keys
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '204':
          description: No response body
  /api/client-services/:
    get:
      operationId: client_services_list
      parameters:
      - in: query
        name: active
        schema:
          type: boolean
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: name
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - in: query
        name: owner
        schema:
          type: integer
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - client-services
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAPIServiceList'
          description: ''
    post:
      operationId: client_services_create
      tags:
      - client-services
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/APIService'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/APIService'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/APIService'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIService'
          description: ''
  /api/client-services/{id}/:
    get:
      operationId: client_services_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this api service.
        required: true
      tags:
      - client-services
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIService'
          description: ''
    put:
      operationId: client_services_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this api service.
        required: true
      tags:
      - client-services
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/APIService'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/APIService'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/APIService'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIService'
          description: ''
    patch:
      operationId: client_services_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this api service.
        required: true
      tags:
      - client-services
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAPIService'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedAPIService'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedAPIService'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIService'
          description: ''
    delete:
      operationId: client_services_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this api service.
        required: true
      tags:
      - client-services
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '204':
          description: No response body
  /api/key-gen/:
    get:
      operationId: key_gen_retrieve
      tags:
      - key-gen
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
components:
  schemas:
    APIService:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        api_key:
          type: string
          writeOnly: true
        name:
          type: string
          maxLength: 200
        service_provider:
          type: string
          maxLength: 200
        description:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        active:
          type: boolean
        url:
          type: string
          format: uri
          maxLength: 200
        url_compatible_name:
          type: string
          maxLength: 100
        image:
          type: string
          format: uri
          nullable: true
          maxLength: 200
      required:
      - created_at
      - description
      - id
      - name
      - service_provider
      - updated_at
      - url
      - url_compatible_name
    BillingRule:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        api_service:
          type: integer
        name:
          type: string
          maxLength: 200
        description:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        regex:
          type: string
          maxLength: 200
        price_per:
          type: string
          format: decimal
          pattern: ^-?\d{0,5}(?:\.\d{0,5})?$
        rule_level:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
      required:
      - api_service
      - created_at
      - description
      - id
      - name
      - regex
      - updated_at
    JWT:
      type: object
      description: Serializer for JWT authentication.
      properties:
        access:
          type: string
        refresh:
          type: string
        user:
          $ref: '#/components/schemas/UserDetails'
      required:
      - access
      - refresh
      - user
    Login:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
      required:
      - password
    PaginatedAPIServiceList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/APIService'
    PaginatedBillingRuleList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/BillingRule'
    PaginatedServiceAPIKeyList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ServiceAPIKey'
    PasswordChange:
      type: object
      properties:
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
      required:
      - new_password1
      - new_password2
    PasswordReset:
      type: object
      description: Serializer for requesting a password reset e-mail.
      properties:
        email:
          type: string
          format: email
      required:
      - email
    PasswordResetConfirm:
      type: object
      description: Serializer for confirming a password reset attempt.
      properties:
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
        uid:
          type: string
        token:
          type: string
      required:
      - new_password1
      - new_password2
      - token
      - uid
    PatchedAPIService:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        api_key:
          type: string
          writeOnly: true
        name:
          type: string
          maxLength: 200
        service_provider:
          type: string
          maxLength: 200
        description:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        active:
          type: boolean
        url:
          type: string
          format: uri
          maxLength: 200
        url_compatible_name:
          type: string
          maxLength: 100
        image:
          type: string
          format: uri
          nullable: true
          maxLength: 200
    PatchedBillingRule:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        api_service:
          type: integer
        name:
          type: string
          maxLength: 200
        description:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        regex:
          type: string
          maxLength: 200
        price_per:
          type: string
          format: decimal
          pattern: ^-?\d{0,5}(?:\.\d{0,5})?$
        rule_level:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
    PatchedServiceAPIKey:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        prefix:
          type: string
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
          description: A free-form name for the API key. Need not be unique. 50 characters
            max.
          maxLength: 50
        revoked:
          type: boolean
          description: If the API key is revoked, clients cannot use it anymore. (This
            cannot be undone.)
        api_service:
          type: integer
    PatchedUserDetails:
      type: object
      description: User model w/o password
      properties:
        pk:
          type: integer
          readOnly: true
          title: ID
        email:
          type: string
          format: email
          readOnly: true
          title: Email address
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
    Register:
      type: object
      properties:
        username:
          type: string
          maxLength: 0
          minLength: 1
        email:
          type: string
          format: email
        password1:
          type: string
          writeOnly: true
        password2:
          type: string
          writeOnly: true
      required:
      - email
      - password1
      - password2
    ResendEmailVerification:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
      - email
    RestAuthDetail:
      type: object
      properties:
        detail:
          type: string
          readOnly: true
      required:
      - detail
    ServiceAPIKey:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        prefix:
          type: string
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
          description: A free-form name for the API key. Need not be unique. 50 characters
            max.
          maxLength: 50
        revoked:
          type: boolean
          description: If the API key is revoked, clients cannot use it anymore. (This
            cannot be undone.)
        api_service:
          type: integer
      required:
      - api_service
      - created
      - id
      - prefix
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    TokenVerify:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
      required:
      - token
    UserDetails:
      type: object
      description: User model w/o password
      properties:
        pk:
          type: integer
          readOnly: true
          title: ID
        email:
          type: string
          format: email
          readOnly: true
          title: Email address
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
      - email
      - pk
    VerifyEmail:
      type: object
      properties:
        key:
          type: string
          writeOnly: true
      required:
      - key
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    jwtCookieAuth:
      type: apiKey
      in: cookie
      name: jwt-auth
    jwtHeaderAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"

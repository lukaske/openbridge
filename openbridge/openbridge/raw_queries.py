def getAnalyticsRawQuery():
    # Very sorry, multiline string was causing many issues
    query = "SELECT CASE WHEN DATE_TRUNC('day', a.created_at) >= current_date - interval '1 days' THEN 'day-1' WHEN DATE_TRUNC('day', a.created_at) >= current_date - interval '2 days' THEN 'day-2' WHEN DATE_TRUNC('day', a.created_at) >= current_date - interval '3 days' THEN 'day-3' WHEN DATE_TRUNC('day', a.created_at) >= current_date - interval '4 days' THEN 'day-4' WHEN DATE_TRUNC('day', a.created_at) >= current_date - interval '5 days' THEN 'day-5' WHEN DATE_TRUNC('day', a.created_at) >= current_date - interval '6 days' THEN 'day-6' WHEN DATE_TRUNC('day', a.created_at) >= current_date - interval '7 days' THEN 'day-7' WHEN DATE_TRUNC('day', a.created_at) >= current_date - interval '8 days' THEN 'day-8' WHEN DATE_TRUNC('day', a.created_at) >= current_date - interval '9 days' THEN 'day-9' WHEN DATE_TRUNC('day', a.created_at) >= current_date - interval '10 days' THEN 'day-10' WHEN DATE_TRUNC('day', a.created_at) >= current_date - interval '11 days' THEN 'day-11' WHEN DATE_TRUNC('day', a.created_at) >= current_date - interval '12 days' THEN 'day-12' WHEN DATE_TRUNC('day', a.created_at) >= current_date - interval '13 days' THEN 'day-13' ELSE 'day-14-plus' END AS days, COUNT(*) AS count, b.name as api_service_name, b.id FROM openbridge_apirequest a join openbridge_apiservice b on b.id = a.api_service_id WHERE a.created_at >= current_date - interval '13 days' and user_id = %s GROUP BY days, b.id, api_service_name ORDER BY MIN(a.created_at) DESC;"
    return query

def getAnalyticsRawQueryOwner():
    query = "SELECT CASE WHEN DATE_TRUNC('day', a.created_at) >= current_date - interval '1 days' THEN 'day-1' WHEN DATE_TRUNC('day', a.created_at) >= current_date - interval '2 days' THEN 'day-2' WHEN DATE_TRUNC('day', a.created_at) >= current_date - interval '3 days' THEN 'day-3' WHEN DATE_TRUNC('day', a.created_at) >= current_date - interval '4 days' THEN 'day-4' WHEN DATE_TRUNC('day', a.created_at) >= current_date - interval '5 days' THEN 'day-5' WHEN DATE_TRUNC('day', a.created_at) >= current_date - interval '6 days' THEN 'day-6' WHEN DATE_TRUNC('day', a.created_at) >= current_date - interval '7 days' THEN 'day-7' WHEN DATE_TRUNC('day', a.created_at) >= current_date - interval '8 days' THEN 'day-8' WHEN DATE_TRUNC('day', a.created_at) >= current_date - interval '9 days' THEN 'day-9' WHEN DATE_TRUNC('day', a.created_at) >= current_date - interval '10 days' THEN 'day-10' WHEN DATE_TRUNC('day', a.created_at) >= current_date - interval '11 days' THEN 'day-11' WHEN DATE_TRUNC('day', a.created_at) >= current_date - interval '12 days' THEN 'day-12' WHEN DATE_TRUNC('day', a.created_at) >= current_date - interval '13 days' THEN 'day-13' ELSE 'day-14-plus' END AS days, COUNT(*) AS count, b.name as api_service_name, b.id FROM openbridge_apirequest a join openbridge_apiservice b on b.id = a.api_service_id WHERE a.created_at >= current_date - interval '13 days' and b.owner_id = %s GROUP BY days, b.id, api_service_name ORDER BY MIN(a.created_at) DESC;"
    return query